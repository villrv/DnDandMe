import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons
from gatspy import periodic
import warnings

object_id, mjd, passband, flux, flux_err, detected = np.genfromtxt('training_set.csv', unpack = True, delimiter = ',')
object_id_metadata, ra, decl, gal_l, gal_b, ddf, hostgal_specz, hostgal_photoz, hostgal_photoz_err, distmod, mwebv, target = np.genfromtxt('training_set_metadata.csv', unpack = True, delimiter = ',') 

## 6  microlensing?  not variable; triangular;~100+ days; lensing? Single event flares, lasting hundreds of days
# 16 variable star  variable star, cephied like RR Lyrae?
## 53 variable star  mira variable, periods of ~ 300 days
# 65 variable star  super poor signal. very sparse
## 92 variable star  can kinda see signal on ~50 day timescale, RR Lyrae, periods of around 15 hours

def phase_data(time, period):
    phase0 = time[0]
    phase = ((time - phase0) / period) % 1
    return phase

rund = lambda x, n : np.around(x, decimals = n)

def create_periodogram(time_array, magnitude, sigma, min_period, max_period):
    model = periodic.LombScargle(fit_period=True)
    model.optimizer.period_range = (min_period, max_period)
    model.fit(time_array, magnitude, sigma);

    periods_array = np.linspace(min_period, max_period, 1000)

    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        scores = model.score(periods_array)

    return periods_array, scores

def plot_slider(object_number, min_period, max_period, snr_cut = 5, band = 'all'):
    # Extract MJD, Flux, and Sigma
    time_array  =      mjd[np.where(object_id == object_number)] * 24.0
    flux_zero   =     flux[np.where(object_id == object_number)]
    sigma_array = flux_err[np.where(object_id == object_number)]
    band_array  = passband[np.where(object_id == object_number)]

    # Shift everything so that there are no negative fluxes
    flux_array = flux_zero - min(flux_zero) + 1

    # Convert to magnitude
    magnitude = - 2.5 * np.log10(flux_array) + 10
    sigma     = sigma_array * 1.08574 / flux_array

    # Band cut
    if band == 'all':
        band_cut = np.where(band_array)[0]
    else:
        band_cut = np.where(band_array == band)[0]

    # SNR cut
    snr      = flux_array / sigma_array
    good_snr = np.where(snr[band_cut] > snr_cut)
    bad_snr  = np.where(snr[band_cut] <= snr_cut)

    # Crop Arrays
    time_array_good = time_array[band_cut][good_snr]
    magnitude_good  = magnitude[band_cut][good_snr]
    sigma_good      = sigma[band_cut][good_snr]

    # Generate Periodogram
    periods_array, scores = create_periodogram(time_array_good, magnitude_good, sigma_good, min_period, max_period)
    best_period = periods_array[np.argmax(scores)]

    #fig, ax = plt.subplots()
    plt.figure(figsize=(6,8))
    plt.subplots_adjust(bottom=0.20)

    # Phase the data
    phase = phase_data(time_array_good, best_period)
    phase_double = np.append(phase, phase + 1.0)
    magnitude_double = np.append(magnitude_good, magnitude_good)

    # Plot Raw light curve
    plt.gca().invert_yaxis()
    ax0=plt.subplot(3, 1, 1)
    ax0.errorbar(time_array_good / 24, magnitude_good, sigma_good, fmt = '.', color = 'g', linewidth = 1)
    ax0.errorbar(time_array[band_cut][bad_snr] / 24, magnitude[band_cut][bad_snr], sigma[band_cut][bad_snr], fmt = '.', color = 'g', linewidth = 1, alpha = 0.2)
    ax0.axis([min(time_array_good / 24), max(time_array_good / 24), np.nanmax(magnitude_good)*1.01, np.nanmin(magnitude_good)*0.99])
    ax0.set_ylabel("Magnitude")
    ax0.set_title("MJD")

    # Plot Periodogram
    ax1=plt.subplot(3, 1, 2)
    ax1.plot(periods_array, scores, lw = 1, color = 'g')
    ax1.axis([min_period, max_period, 0, np.nanmax(scores)*1.01])
    ax1.set_ylabel("Periodogram Power")
    q, = ax1.plot(periods_array[np.argmax(scores)], scores[np.argmax(scores)], marker = 'o', color = 'r', linewidth = 0)

    # Plot Phased light curve
    ax2=plt.subplot(3, 1, 3)
    l, = ax2.plot(phase_double, magnitude_double, lw=0, color='green', marker = 'o', markeredgewidth = 0, markersize = 3)
    ax2.axis([0, 2, np.nanmax(magnitude_good)*1.01, np.nanmin(magnitude_good)*0.99])
    ax2.set_xlabel("Phase")
    ax2.set_ylabel("Magnitude")

    axperiod = plt.axes([0.19, 0.1, 0.68, 0.03])
    speriod  = Slider(axperiod, 'Period [hr]', min_period, max_period, valinit=best_period, valfmt='%1.2f')

    # Change the value of the plot
    def update(val):
        new_period = speriod.val
        new_phase  = phase_data(time_array_good, new_period)
        l.set_xdata(np.append(new_phase, new_phase + 1.0))
        new_best_period = np.argmin(np.abs(periods_array - new_period))
        q.set_xdata(periods_array[new_best_period])
        q.set_ydata(scores[new_best_period])
    speriod.on_changed(update)

    # Reset parameters
    resetax = plt.axes([0.8, 0.025, 0.1, 0.04])
    button = Button(resetax, 'Reset')

    # Reset Button
    def reset(event):
        speriod.reset()
    button.on_clicked(reset)

    plt.show()

def plot_colors(band_array):
    '''
    Generate a list of matplotlib readable colors based on
    the input bands. Set the color to black if the filter
    is not found.
    '''

    # Make Color Array
    all_colors = np.copy(band_array.astype('S16'))

    # Select region for each filter
    a_colors      =  band_array  == 0
    b_colors      =  band_array  == 1
    c_colors      =  band_array  == 2
    d_colors      =  band_array  == 3
    e_colors      =  band_array  == 4
    f_colors      =  band_array  == 5

    # Change Filters to Python colors
    all_colors[a_colors]      = 'b'
    all_colors[b_colors]      = 'g'
    all_colors[c_colors]      = 'r'
    all_colors[d_colors]      = 'maroon'
    all_colors[e_colors]      = 'C'
    all_colors[f_colors]      = 'deeppink'

    colors = np.array(np.ndarray.tolist(all_colors.astype(str)))

    return colors

def plot_simple(object_number, snr_cut = 5, band = 'all'):
    # Extract MJD, Flux, and Sigma
    time_array  =      mjd[np.where(object_id == object_number)] * 24.0
    flux_zero   =     flux[np.where(object_id == object_number)]
    sigma_array = flux_err[np.where(object_id == object_number)]
    band_array  = passband[np.where(object_id == object_number)]

    # Shift everything so that there are no negative fluxes
    flux_array = flux_zero - min(flux_zero) + 1

    # Convert to magnitude
    magnitude = - 2.5 * np.log10(flux_array) + 10
    sigma     = sigma_array * 1.08574 / flux_array

    # Band cut
    if band == 'all':
        band_cut = np.where(band_array)[0]
    else:
        band_cut = np.where(band_array == band)[0]

    # SNR cut
    snr      = flux_array / sigma_array
    good_snr = np.where(snr[band_cut] > snr_cut)
    bad_snr  = np.where(snr[band_cut] <= snr_cut)

    # Crop Arrays
    time_array_good = time_array[band_cut][good_snr]
    magnitude_good  = magnitude[band_cut][good_snr]
    sigma_good      = sigma[band_cut][good_snr]

    colors = plot_colors(band_array[band_cut])

    plt.errorbar(time_array_good / 24, magnitude_good, sigma_good, fmt = '.', ecolor = colors[good_snr], linewidth = 1, ms = 0, elinewidth = 2)
    plt.errorbar(time_array[bad_snr] / 24, magnitude[bad_snr], sigma[bad_snr], fmt = '.', ecolor = colors[good_snr], linewidth = 1, alpha = 0.2, ms = 0, elinewidth = 2)
    
    plt.scatter(time_array_good / 24, magnitude_good, marker = '.', color = colors[good_snr], linewidth = 1)
    plt.scatter(time_array[bad_snr] / 24, magnitude[bad_snr], marker = '.', color = colors[good_snr], linewidth = 1, alpha = 0.2)

    plt.axis([min(time_array_good / 24), max(time_array_good / 24), np.nanmax(magnitude_good)*1.01, np.nanmin(magnitude_good)*0.99])
    plt.ylabel("Magnitude")
    plt.xlabel("MJD")
    plt.show()

def save_phased_plot(object_number, min_period, max_period, snr_cut = 5, band = 'all'):
    # Extract MJD, Flux, and Sigma
    time_array  =      mjd[np.where(object_id == object_number)] * 24.0
    flux_zero   =     flux[np.where(object_id == object_number)]
    sigma_array = flux_err[np.where(object_id == object_number)]
    band_array  = passband[np.where(object_id == object_number)]

    # Shift everything so that there are no negative fluxes
    flux_array = flux_zero - min(flux_zero) + 1

    # Convert to magnitude
    magnitude = - 2.5 * np.log10(flux_array) + 10
    sigma     = sigma_array * 1.08574 / flux_array

    # Band cut
    if band == 'all':
        band_cut = np.where(band_array)[0]
    else:
        band_cut = np.where(band_array == band)[0]

    # SNR cut
    snr      = flux_array / sigma_array
    good_snr = np.where(snr[band_cut] > snr_cut)
    bad_snr  = np.where(snr[band_cut] <= snr_cut)

    # Crop Arrays
    time_array_good = time_array[band_cut][good_snr]
    magnitude_good  = magnitude[band_cut][good_snr]
    sigma_good      = sigma[band_cut][good_snr]

    # Generate Periodogram
    periods_array, scores = create_periodogram(time_array_good, magnitude_good, sigma_good, min_period, max_period)
    best_period = periods_array[np.argmax(scores)]

    #fig, ax = plt.subplots()

    # Phase the data
    phase = phase_data(time_array_good, best_period)
    phase_double = np.append(phase, phase + 1.0)
    magnitude_double = np.append(magnitude_good, magnitude_good)

    # Plot Raw light curve
    fig = plt.figure(figsize=(6,8))
    plt.subplots_adjust(hspace=0.30)
    plt.subplot(311)
    plt.gca().invert_yaxis()
    plt.title('band = ' + str(band))
    plt.errorbar(time_array_good / 24, magnitude_good, sigma_good, fmt = '.', color = 'g', linewidth = 1)
    plt.errorbar(time_array[band_cut][bad_snr] / 24, magnitude[band_cut][bad_snr], sigma[band_cut][bad_snr], fmt = '.', color = 'g', linewidth = 1, alpha = 0.2)
    plt.xlim(min(time_array_good / 24), max(time_array_good / 24))
    plt.ylim(min(magnitude_good)-0.5, max(magnitude_good)+0.5)
    plt.ylabel("Magnitude")
    plt.xlabel("MJD")

    # Plot Periodogram
    plt.subplot(312)
    plt.plot(periods_array, scores, lw = 1, color = 'g')
    plt.ylabel("Periodogram Power")
    plt.plot(periods_array[np.argmax(scores)], scores[np.argmax(scores)], marker = 'o', color = 'r', linewidth = 0, label = '%s hr = %s days'%(rund(best_period, 2), rund(best_period / 24, 2)))
    plt.xlim(min_period, max_period)
    plt.ylim(ymin = 0)
    plt.legend(loc = 'best')
    plt.xlabel("Period [hr]")

    # Plot Phased light curve
    plt.subplot(313)
    plt.gca().invert_yaxis()
    plt.plot(phase_double, magnitude_double, lw=0, color='green', marker = 'o', markeredgewidth = 0, markersize = 3)
    plt.xlabel("Phase")
    plt.ylabel("Magnitude")

    plt.savefig(str(object_number) + '.jpg', bbox_inches = 'tight')
    plt.clf()


# Save a plot of every object
object_53 = np.array([133773,268977,278480,288194,2298767,4416529,4855013,16504681,
                      17991828,20578786,24408486,33834663,55427870,58557115,74062905,
                      76475797,93009853,93620586,97301909,97943128,99366334,104765443,
                      105688990,106195942,108275496,113409097,114163906,117510131,118532728,125642419])
for i in object_53:
    save_phased_plot(i, 50*24, 500*24, band = 5)

# Just plot one object to see it
plot_simple(18471718, band = 5)

# Same, but in all bands
plot_simple(12695)

# Plot the slider
plot_slider(32238, 5*24, 50*24, band = 'all')

''' Class = 92
615       12695     26161     26783     28391     31310     43509
49389     51987     61407     71080     78702     78705     88073
89157     89709     93362     95864     103171    106818    117016
117104    117461    129637    132278    146187    147816    151694
151973    164805    176246    186115    189532    196122    198208
198690    202654    224527    238605    242132    244159    245887
257059    259561    263821    274938    280825    281823    285644
286720    294059    296570    300189    307751    310942    313565
326272    331154    2041005   2960700   2994449   4413277   4534339
5562789   7312772   7364868   7560475   7689256   7711285   10421774
12147053  12483253  13665079  13850906  14034195  16907701  17256338
17600115  17604953  18526162  18648923  18805673  20202637  20234539
20639413  21018948  22217079  23962848  24271581  24308102  24939880
25517472  25796793  25911646  26055012  26714405  27104094  27635345
28007244  28571862  28883392  29101600  29308415  29487870  29902908
30579629  31090093  32159308  32957208  34858934  34976571  36159787
36498915  38491460  38544381  39147935  39194128  39331296  40964628
41322940  41570932  42157427  43574287  44097283  44544601  45225317
46712934  47235882  47805963  49374525  50423372  51494983  52175350
52422308  53325888  53618523  53691649  54230532  55437028  55555899
55931738  56907685  56949500  57029417  58069721  58727845  59772940
61665356  61898932  62384349  62637127  62787418  62873669  63039137
64802521  67117970  67316212  68759044  68857003  69114184  70143431
70906832  70972197  71306733  71819477  73428084  73489449  74113070
74618084  75280162  75333688  76021241  76071363  77359158  77503441
77704291  78557680  79374000  79837252  81182137  82401781  84448602
85466349  85870170  86803704  86821844  87130603  88194361  88924392
89299828  90321306  91625940  91756633  92980141  93365253  94785585
95162381  95490609  95744114  96799174  98267340  100714348 100848667
100939342 101983865 104001614 104533947 106075180 106468638 107351000
108313467 108442020 109873277 110351591 110738539 110975108 111771139
112097340 112834933 112849568 115920996 115990572 116040256 116494849
117633376 117649911 118037880 118664463 119353712 120820188 120903979
120966302 122077687 123056998 123266232 125439857 127175591 128369913
128534658
'''



''' Class = 65
      1227      1926      2624      6266      8688      9006      9172
      9543      9985     10349     10796     11931     12872     14080
     14156     15475     23795     24236     24903     26352     26660
     30066     30576     31033     31605     32375     33409     35555
     36337     36362     36671     37168     38244     39223     42689
     44836     45115     46210     46958     49219     49783     53025
     54915     55018     55141     55155     55946     56769     56893
     57263     57561     57784     59163     59427     60407     60742
     62078     62384     65749     65877     66325     67480     67981
     70816     71438     72256     73433     75562     77010     78095
     78677     79428     81665     82302     83821     84758     85125
     85470     86759     87467     88511     90399     91337     91988
     92334     92929     95147     97053     98533     99932    101890
    102823    103572    104701    107451    107901    111448    111650
    112886    113028    113335    114191    115937    118422    118868
    119882    121182    121883    122235    122716    124183    124188
    125095    125258    125518    125762    126061    127488    127773
    128405    131368    135357    136352    136949    137510    140472
    141334    142099    145160    148204    150344    150765    151458
    152425    152640    152787    155110    155468    158731    159316
    160921    161411    161877    165406    166330    166956    167123
    168146    168952    168957    169375    170883    174836    175105
    175824    177697    179685    180852    182482    183143    183622
    185839    186207    186691    188405    190040    191287    191847
    194937    195026    195331    197595    198034    199112    200148
    200479    202601    204288    204575    204628    206940    208357
    210765    210912    211677    212084    212931    213294    214548
    215085    216087    220000    220702    222506    223791    224103
    224205    225461    225494    226855    227130    228011    230447
    231062    231102    233020    235402    235952    235970    237982
    239364    239835    241980    242522    243726    244952    245078
    247738    249983    250871    253015    254842    255891    256899
    257550    258888    260709    262305    263348    264234    264580
    265676    266651    266702    268132    269068    269366    269454
    270085    271893    272586    274599    275418    276677    279617
    280334    280954    281056    281787    282659    284373    284655
    284751    285577    288035    289591    289657    289752    290589
    290797    292729    292798    293730    293898    294782    296285
    297005    299108    302077    302849    304076    304623    304846
    305496    305673    305958    306448    312964    313359    313542
    314321    315560    315765    316866    318410    319255    319467
    319727    323417    325372    325892    326167    326600    326938
    328531    329394    330300    330663    331321    331371    331996
    334262    334333    337743    338999    340434    341032    341487
    341769   1153371   1597464   1919887   2106069   2278738   2317409
   2631268   3100669   3199544   3366417   3433294   3625643   4051758
   4397116   4545655   5265524   5343694   5345351   5506098   5849046
   5907921   6307613   6802807   6822542   6957058   7019508   7186964
   7300190   7381638   7464048   7512775   7785536   7911816   8561462
   8577245   8602702   8803729   8843338   9240224   9263357   9316740
   9337823   9730644   9839433   9858227  10120851  10236042  10537177
  10934602  11160105  11284955  11697012  11840166  11917143  11943258
  12185393  12613808  12638340  12995182  13288764  13895118  13981035
  14193352  14219599  14855523  14958598  14962316  14979611  15444354
  15751675  15795242  16081303  16303031  16427062  16464556  16576079
  16763588  17011351  17120627  17357163  17369404  17568125  17934513
  18269097  18396245  18435121  18749173  18855490  19582731  19665529
  19848494  19887645  20051340  20137530  20146105  20222869  20842318
  20882616  21245651  21263072  21468856  21687853  22030435  22038268
  22066317  22123701  22395287  22591096  22837565  23375116  23443064
  23564112  23687970  23800471  23976241  24063531  24105587  24894879
  24960613  25656040  25959392  26082555  26686114  26985953  27045293
  27062714  27418086  27423771  27893568  28132311  28238969  28381358
  28499486  28920225  28931793  29042961  29252985  29330683  29363058
  29557097  29580219  29626182  29676720  30092260  30106902  30328471
  30978418  31294384  31387343  32014077  32022852  32454888  32555628
  32908557  33023998  33111509  33754302  33971518  34161124  34242583
  34346376  34401716  34548484  34975830  35114427  35160935  35337692
  35463750  35689739  36356702  36420864  36938257  37211420  37465168
  37522704  37593908  37830666  37971930  38013358  38092995  38396509
  38396910  38646442  38652935  38987648  39274347  39598576  39834726
  39894363  40057040  40308439  40426358  40838478  40938993  41179699
  41379913  41388767  41504014  41562706  41832206  42281906  42361501
  42364797  42366062  42946671  43055963  43074821  43225578  43299034
  43345841  43392755  43479814  43787700  43858979  43871241  44277346
  44467188  44512987  44815772  44859184  44980234  45015918  45033962
  45516859  45991497  46163930  46757795  46962483  47021607  47059337
  47115494  47356721  47509767  47747067  47784490  47786389  48255990
  48521320  48837773  49207610  49328817  49611669  49620169  49626003
  49766404  49816903  49950170  50136410  50198556  51106790  51416033
  51729401  51740129  51964042  52043583  52166547  52490970  52594876
  52643613  53004638  53070942  53389262  53735388  53970407  54045253
  54049366  54644468  54679871  54732090  54923873  55362214  55439147
  55614977  55629842  56021724  56148192  56404734  56611590  56651915
  56826212  57058720  57295742  57679220  57796596  57813649  57922414
  57958087  58176382  58469213  58532100  58917019  59194660  59214874
  60591506  60838659  60911377  61014746  61253488  61364657  61994170
  62002025  62517295  62533533  62707994  63031382  63176254  63210303
  63356130  63537739  63546596  63664965  63782346  63852414  64052879
  64218010  64571603  64576696  65015360  65066719  65825482  65925566
  66112663  66433307  66443977  66581923  66668643  66730006  66756466
  66771619  66837274  67131527  67131787  67240874  67256001  67342144
  67616019  67679513  68994275  69073595  69202687  69458421  69542885
  69818046  70002281  70078582  70351780  70603566  70702402  70757696
  70764218  70799594  70988624  71104805  71459665  71765133  72049251
  72065768  72123526  72796451  72982944  73069741  73367509  73898715
  74350461  74643391  74672965  74673919  75029278  75093083  75319011
  75349007  75452771  75636757  75672971  75779181  75836092  75917809
  75993992  76048962  76187179  76606004  76865712  77149421  77238630
  77254179  77272356  77601822  78137071  78256436  78722347  78749431
  79148435  79213923  79481705  79778534  79914128  80156792  80321777
  80445940  80602558  80667329  81005439  81008012  81144750  81410514
  81449512  81609295  81787666  81833228  81888180  82372456  82376964
  83212815  83888930  83898612  84224194  84265542  84357869  84578797
  84777347  84809867  84902535  85039480  85144130  85414569  85439795
  85439845  85522998  85780680  85948675  86230042  86252276  86489973
  86635308  86705407  86758363  86919217  86934478  86975648  87128267
  87150582  87268787  87417556  87417982  87691892  87842606  87939927
  88041263  88228019  88231233  88256651  88343802  88451685  88459694
  89002707  89084833  89108521  89274370  89329228  89475579  89911813
  90153116  90250289  90361022  90512781  90987882  91226665  91772215
  91932161  92251672  92347595  92850197  92879476  92983416  93344982
  93417061  94273668  94463465  94641282  94935328  94954841  95049712
  95866530  96240657  96246879  96676197  96715108  96975445  97072448
  97209370  97286077  97887024  97906234  98118937  98231865  98320066
  98325702  98507931  98714884  99441494  99593374  99726434 100102280
 100127808 100298871 100442019 100551111 100599449 101363984 101444167
 101463790 101472423 101729393 101762942 102354931 102520034 102613703
 102904396 103081913 103252558 103315620 103356665 103790643 103821196
 103830439 103995649 104068719 104099126 104397193 104503861 104824830
 104943450 105130907 105566563 105927371 106115608 106239422 106363367
 106384945 106545479 106648824 106750068 106777707 106960570 107488869
 107598111 107657609 107808561 107928532 107981524 108098286 108101311
 108328529 109088969 109555933 109638647 110107673 110439735 111575197
 111633916 111660438 111834074 112099006 112354774 112786258 112989415
 113245040 113252850 113329667 113605848 113773376 113793755 113904322
 114118396 114237780 114309134 115007508 115230721 115535088 115557873
 115609783 115870585 115912282 115915799 116050087 116351667 116382337
 116432654 116451501 116479961 116482346 116619873 116673023 117495237
 117576294 117673504 118263078 118285479 118343993 118446342 118480800
 118551096 118602674 118626032 118657889 118689867 118757157 118813180
 119012934 119209616 119357431 119388820 120024060 120246755 120303445
 120354907 120425433 120482965 120558934 120661580 120808014 120818032
 121029519 121429195 121504515 121704427 122303146 122335762 122914042
 122937949 123040324 123429049 123484109 123745818 123809533 123988679
 124191739 124546893 124643103 124977183 125509795 126374794 126644087
 126791777 127145862 127521319 127843563 128113763 128123284 128167460
 128527504 128529993 128765670 128814583 128932972 128953634 128961480
 128971260 129030512 129045287 129135543 129257128 129399030 129416892
 129964738 130108924 130330088 130386135 130622528 130727624 130739978
 130772921
'''

''' Class = 53
    133773    268977    278480    288194   2298767   4416529   4855013
  16504681  17991828  20578786  24408486  33834663  55427870  58557115
  74062905  76475797  93009853  93620586  97301909  97943128  99366334
 104765443 105688990 106195942 108275496 113409097 114163906 117510131
 118532728 125642419
'''


''' Class = 16
      2677      4171      7566      7756      8784     11165     15626
     15700     16339     16349     17094     17172     22574     24849
     25920     26401     27124     28915     30505     30673     30895
     32238     37776     38730     42776     43413     44480     45203
     46567     48426     48981     52370     53525     53938     56245
     60376     61101     62230     64485     66904     68667     75116
     75754     76305     82401     84306     87498     88980     89298
     92566     94107    101374    102330    104523    106429    112629
    115670    116570    117184    123926    123927    126970    130625
    131181    131492    135588    139016    143865    145107    150266
    151356    152567    152618    152682    153089    154986    159491
    161432    162152    166165    166195    168989    169967    172461
    174980    176756    179639    181598    183985    184340    185605
    187120    187511    188157    188801    188831    193961    197299
    197585    198133    200161    200949    205293    205459    205895
    206766    216970    218368    220685    223940    229781    234724
    235124    236205    240399    242834    243303    243320    246012
    246195    247906    252924    254469    265034    266677    272197
    272367    272628    273320    273339    273604    277648    280814
    281273    281669    284802    288128    288967    290954    294235
    298019    300684    302142    308282    310143    312681    312787
    316154    316619    318155    320622    321283    323163    325974
    329568    329826    329854    330311    330517    331174    332245
    342819   1215304   1288208   1415987   1904697   1952799   2110685
   2352593   2580406   2698409   2776284   2902700   2939083   3038674
   3311525   3412167   3419558   3460976   3478374   3810368   3829378
   3909174   3943958   4037062   4092696   4175952   4364990   4548783
   4567028   4797347   4798690   4814572   4999074   5072263   5095468
   5487304   5823700   5855578   5888692   5936751   5947089   6103303
   6125178   6180348   6231563   6273384   6360352   6466200   7186711
   7310089   7512735   7550910   7627056   7805020   7930361   8056979
   8146628   8198259   8427624   8476473   8727043   9183851   9210589
   9467509   9679645   9815437   9873656   9908199  10249320  10366036
  10401079  10509087  10803573  10819374  10960141  11087186  11218868
  11535014  12159099  12666732  12694304  12815824  12830725  12835850
  13243840  13457941  13461510  13470537  13595580  13619009  13719769
  14404309  14624104  14650534  14691393  14739524  15072535  15394758
  15541983  15603210  15727305  15858721  15980885  16390872  16477535
  16651214  17010401  17189292  17397053  17499149  17537874  17596103
  17787345  17920072  17961961  18211253  18217408  18568946  19397910
  20099667  20228090  20606090  20615291  21513930  21585678  21640883
  21681904  22148842  22355344  22355778  22409200  22709656  22738032
  22813375  22844503  22942317  23039398  23106151  23606025  23864604
  23942408  24416988  24499337  24719653  24779747  25307100  25351681
  25793380  26076496  26264757  26382287  26463927  26769312  26808295
  27214925  27222589  27489433  27924241  28006884  28532408  28616032
  28919347  29011171  29331377  29356260  29361009  29465049  29518677
  29654243  29838870  30119114  30210862  30414766  30417758  30460636
  30506386  30620888  30776756  31045582  31171384  31322805  31866026
  32211456  32229396  32325962  33015212  33061874  33173185  33240187
  33627375  34001553  34531358  34660019  34866353  34991896  35005260
  35193977  35879236  35919137  36068390  36170782  36296411  36405978
  36420637  36472855  36512644  36577183  36739565  37032540  37082662
  37768852  37829244  37838502  37856107  37956124  37963632  38054020
  38132867  38356216  38377983  38380125  38528320  38550607  38573605
  38591698  38775504  40027350  40086312  40373475  40408927  40623458
  40644715  40649392  40718728  40940160  41033322  41089631  41149470
  41150627  41395251  41498244  41817937  41847737  42146292  42258259
  42397369  42483144  42638097  42902885  43088055  43188456  43434496
  43537711  43541597  43637846  43694559  44283864  44307163  44548778
  44637346  44903772  45308850  45627377  45984731  46595962  46609480
  46672673  46893132  47123160  47348026  47608756  47767011  47958757
  47998087  48405492  48407508  48447688  48459874  48625068  48677406
  48725835  49195651  49589687  49686525  49748338  50089586  50120717
  50218120  50429346  50926314  51055844  51492407  51833345  52118002
  52320160  52383458  52482475  52616603  52878431  53143281  53484764
  53533088  53533366  53655507  53673297  53856704  54026126  54205468
  54315699  54391376  54659129  54883621  54893461  54935411  55022270
  55182054  55417986  55659088  55722278  55823003  55828424  56173869
  56287702  56320877  56430809  56539682  56567051  56635330  56675654
  56818916  56901403  57079255  57511950  57563181  57610855  57820454
  57823957  57833763  58112745  58143636  58144494  58514166  58660846
  59585378  59590565  59753617  59811952  59822050  59889755  59948995
  60075299  60222264  60447309  60472968  60478784  61444402  61510669
  61541235  61668962  61749689  61755703  62050723  62230846  62243748
  62286040  62388395  62428500  62490771  62590415  62662302  62698558
  63003617  63039242  63333778  63427111  63663374  64054152  64226016
  64236746  64603541  64772601  65379674  65479023  65788059  66244110
  66586389  66617032  66626509  66734415  66743070  66812546  67089327
  67114897  67279967  67391295  67410269  67582612  67726657  67742303
  67852731  68359156  68423835  68475316  68520877  68699474  68996599
  69335112  69720208  70672645  70819205  70890576  70947093  71126328
  71154324  71188760  71274152  71496808  71878650  71996356  72058012
  72074915  72242636  72255258  72262779  72273047  72391044  72803727
  73029171  73045012  73196956  73402968  73418931  73501938  73602888
  73958432  74025574  74193504  74452430  74484351  74643673  74720745
  74818669  74909063  75011768  75066687  75186008  75607816  75619815
  75851648  76054880  76536433  77241833  77298174  77319274  77339532
  77600088  77841283  78199831  78209099  78240543  78291971  78489392
  78518429  78627577  79035534  79430982  79653262  79752787  79754147
  79979417  80057609  80301529  80509676  80554090  80569144  80968556
  81312618  81616086  81781801  82065393  82246622  82391419  82883089
  82943308  83081946  83195879  83227942  83370784  83382207  83577857
  83630554  84244582  84307529  84669175  84871886  85191221  85589964
  85649048  85680335  86292032  86401521  86658359  86660966  86698966
  86742908  86809657  86813047  87082980  87206189  87631226  87697682
  87724529  87752075  87808950  87856388  88063507  88413067  88695626
  88949087  89159753  89576049  89745225  89872627  89910561  90047765
  90314147  90390292  90778992  91074470  91343957  91420500  91861189
  91900996  91930831  92053866  92254052  92364022  92401308  92435141
  92602382  92674135  92758794  92801741  92961569  92994438  93271095
  93721842  93762121  93784919  94028932  94081343  94127773  94314733
  94701441  94896507  95049915  95159385  95246740  95317623  95499260
  95595375  95878899  95894937  96233651  96298291  96620553  96664331
  96728510  96761640  97285127  97442088  97459034  97742269  97792190
  98038305  98154518  98167067  98191793  98504357  98510065  99041421
  99108245  99173112  99638726 100122518 100413487 100433423 100577197
 101133992 101244973 101441464 101619848 101633495 101898318 102024375
 102043319 102223194 102386526 102748747 102921481 102990543 103244674
 103364815 103476050 103504440 103539300 103817167 103943330 104254337
 104412911 104515954 105033517 105128080 105206255 105478465 105891238
 106287350 106363739 106438996 106513022 106633938 106766792 106915630
 107474309 107557728 108110512 108136575 108160238 108255616 108315597
 108327120 108423541 108481380 108605654 108716871 109069907 109178080
 109197025 109321076 109694858 109785117 109882055 109968805 110034581
 110095987 110099058 110205532 110261089 110443431 110567709 110570640
 110803113 111277141 111327134 111483418 111594124 111594831 111716677
 111961956 111983701 112163086 112776534 112829721 112957822 113522149
 113914289 114029053 114196389 114527919 114680258 114688142 115101113
 115136821 115156765 115213621 115307554 115402304 115624137 115647298
 115827173 115870014 115910890 115969914 116375549 116468115 116541363
 116872334 116913755 116941623 117485952 117504147 117562970 117565211
 117577580 117638588 117700715 117961865 118190437 118227385 118559051
 118886900 118970396 119057101 119641616 120024719 120030400 120325550
 120630180 120676520 120700609 121223034 121404313 121677504 122582076
 122683239 122845088 123024210 123275660 123470724 123478866 123563797
 123618670 123621973 123737006 123856811 124598677 124702871 125191602
 125232937 125405685 125835575 126010694 126014103 126141352 126309844
 126400136 126686045 126709379 126863593 127333004 127392312 127540625
 127752560 128083908 128240086 128248681 128490634 128598679 128796733
 128949060 128966389 129459169 129705825 129845065 129937154 130062639
 130102264 130312781 130408188 130489916 130684460 130716752 130762946
'''


''' Class = 6
     18556     77157     83348    198103    201890    282647    332684
   1497514   1516088   1854631   7483838   8383041   8769352   9683805
  10343540  11912866  11914968  11981863  12022536  13043842  14379202
  15797803  17071074  18396718  18471718  19065476  20630488  20968573
  22517359  23068227  23304584  24387059  24531840  25094602  28334351
  28928626  29416728  30606045  31732480  33843890  35268410  36551205
  36689698  37663127  38785688  39233485  39511222  39875262  41284720
  41874247  42082198  42606035  45274699  46593866  47098836  47844589
  48543817  48839513  49308793  49875529  55669336  56476499  56584102
  56689404  58341051  59105467  60107783  63480468  64264583  65649711
  65725461  66412906  67486956  69629671  70215883  71084419  72074395
  74440718  75947875  76337325  76664408  77033002  78242149  79258779
  79358538  79915751  80067866  82447262  82549887  82678948  82695182
  82946595  83308179  83969535  85293412  85879861  86151472  86213654
  86487763  87175959  87183951  87402469  87997772  88287927  88333068
  88596338  90739539  91657831  91705234  91963316  92769326  95121324
  96596386  98465677 101758035 102464956 102495930 103034798 104334773
 105285783 105830156 105927645 106125777 109371427 109797362 110375526
 110804451 112109284 112156585 112292777 112416509 114486201 114499870
 115531862 117248685 117391011 117450083 121171205 121255943 121683577
 122270224 122618819 123488700 124373338 125665164 126262179 126564408
 127374613 128983448 130219752 130779836
'''